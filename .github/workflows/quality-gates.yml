name: Code Quality Gates

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run quality checks daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  quality-gates:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
      fail-fast: false
    
    steps:
    - name: 🔍 Checkout Code
      uses: actions/checkout@v4
      with:
        # Fetch full history for better analysis
        fetch-depth: 0
    
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        cd Backend_PRS
        pip install -r requirements.txt || echo "Warning: Could not install all requirements"
        
        # Install additional quality tools if needed
        pip install pylint flake8 bandit safety || echo "Warning: Could not install linting tools"
    
    - name: 📊 Run Code Complexity Analysis
      id: complexity
      run: |
        cd Backend_PRS
        python scripts/quality/code_complexity_analyzer.py \
          --project-root . \
          --output complexity-report.json \
          --verbose
      continue-on-error: true
    
    - name: 🎯 Run Quality Gates
      id: quality-gates
      run: |
        cd Backend_PRS
        python scripts/quality/quality_gates.py \
          --check \
          --ci-mode \
          --output quality-gates-results.json \
          --verbose
      continue-on-error: true
    
    - name: 📈 Generate Quality Dashboard
      id: dashboard
      if: always()
      run: |
        cd Backend_PRS
        python scripts/quality/quality_dashboard.py \
          --generate-dashboard \
          --output quality-dashboard.html
      continue-on-error: true
    
    - name: 🚨 Security Scan
      id: security
      run: |
        cd Backend_PRS
        # Run bandit security scan
        bandit -r . -f json -o security-report.json || echo "Security scan completed with findings"
        
        # Run safety check for dependencies
        safety check --json --output safety-report.json || echo "Safety check completed"
      continue-on-error: true
    
    - name: 📋 Quality Summary
      if: always()
      run: |
        cd Backend_PRS
        echo "## 📊 Quality Gates Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Parse quality gates results
        if [ -f "quality-gates-results.json" ]; then
          echo "### 🎯 Quality Gates Results" >> $GITHUB_STEP_SUMMARY
          python -c "
          import json, sys
          try:
              with open('quality-gates-results.json') as f:
                  data = json.load(f)
              
              status = '✅ PASSED' if data.get('passed', False) else '❌ FAILED'
              print(f'**Status:** {status}')
              
              summary = data.get('summary', {})
              print(f'- Total Gates: {summary.get(\"total_gates\", 0)}')
              print(f'- ✅ Passed: {summary.get(\"passed_gates\", 0)}')
              print(f'- ❌ Failed: {summary.get(\"failed_gates\", 0)}')
              print(f'- ⚠️ Warnings: {summary.get(\"warning_gates\", 0)}')
              
              violations = data.get('violations', [])
              if violations:
                  print('\n**Violations:**')
                  for v in violations[:5]:  # Show first 5
                      severity = '❌' if v['severity'] == 'error' else '⚠️'
                      print(f'- {severity} {v[\"gate\"]}: {v[\"message\"]}')
          except Exception as e:
              print(f'Error parsing results: {e}')
          " >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📈 Key Metrics" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "complexity-report.json" ]; then
          python -c "
          import json
          try:
              with open('complexity-report.json') as f:
                  data = json.load(f)
              
              print(f'- 📁 Total Files: {data.get(\"total_files\", 0):,}')
              print(f'- 📄 Total Lines: {data.get(\"total_lines\", 0):,}')
              
              summary = data.get('summary', {})
              print(f'- 📊 Avg Lines/File: {summary.get(\"average_lines_per_file\", 0):.1f}')
              print(f'- 🚨 Critical Files: {summary.get(\"files_exceeding_300_lines\", 0)}')
              print(f'- 🏆 Grade A Modules: {summary.get(\"modules_with_grade_a\", 0)}')
              print(f'- ⚠️ Poor Grade Modules: {summary.get(\"modules_with_grade_c_or_below\", 0)}')
          except Exception as e:
              print(f'Error parsing complexity report: {e}')
          " >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- 📊 [Quality Dashboard](./quality-dashboard.html)" >> $GITHUB_STEP_SUMMARY
        echo "- 📋 [Complexity Report](./complexity-report.json)" >> $GITHUB_STEP_SUMMARY
        echo "- 🎯 [Quality Gates Results](./quality-gates-results.json)" >> $GITHUB_STEP_SUMMARY
    
    - name: 📤 Upload Quality Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: quality-reports-${{ matrix.python-version }}
        path: |
          Backend_PRS/complexity-report.json
          Backend_PRS/quality-gates-results.json
          Backend_PRS/quality-dashboard.html
          Backend_PRS/security-report.json
          Backend_PRS/safety-report.json
        retention-days: 30
    
    - name: 💬 Comment PR with Quality Results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## 📊 Code Quality Report\n\n';
          
          // Read quality gates results
          try {
            const qualityData = JSON.parse(fs.readFileSync('Backend_PRS/quality-gates-results.json', 'utf8'));
            const status = qualityData.passed ? '✅ PASSED' : '❌ FAILED';
            const summary = qualityData.summary || {};
            
            comment += `### 🎯 Quality Gates: ${status}\n\n`;
            comment += `| Metric | Count |\n`;
            comment += `|--------|-------|\n`;
            comment += `| Total Gates | ${summary.total_gates || 0} |\n`;
            comment += `| ✅ Passed | ${summary.passed_gates || 0} |\n`;
            comment += `| ❌ Failed | ${summary.failed_gates || 0} |\n`;
            comment += `| ⚠️ Warnings | ${summary.warning_gates || 0} |\n\n`;
            
            if (qualityData.violations && qualityData.violations.length > 0) {
              comment += '### 🚨 Quality Violations\n\n';
              qualityData.violations.slice(0, 5).forEach(v => {
                const icon = v.severity === 'error' ? '❌' : '⚠️';
                comment += `- ${icon} **${v.gate}**: ${v.message}\n`;
              });
              comment += '\n';
            }
          } catch (e) {
            comment += '⚠️ Could not parse quality gates results\n\n';
          }
          
          // Read complexity results
          try {
            const complexityData = JSON.parse(fs.readFileSync('Backend_PRS/complexity-report.json', 'utf8'));
            const summary = complexityData.summary || {};
            
            comment += '### 📈 Code Metrics\n\n';
            comment += `| Metric | Value |\n`;
            comment += `|--------|-------|\n`;
            comment += `| Total Files | ${complexityData.total_files?.toLocaleString() || 0} |\n`;
            comment += `| Total Lines | ${complexityData.total_lines?.toLocaleString() || 0} |\n`;
            comment += `| Avg Lines/File | ${summary.average_lines_per_file?.toFixed(1) || 0} |\n`;
            comment += `| Critical Files | ${summary.files_exceeding_300_lines || 0} |\n`;
            comment += `| Grade A Modules | ${summary.modules_with_grade_a || 0} |\n\n`;
          } catch (e) {
            comment += '⚠️ Could not parse complexity results\n\n';
          }
          
          comment += '### 📋 Quality Recommendations\n\n';
          try {
            const complexityData = JSON.parse(fs.readFileSync('Backend_PRS/complexity-report.json', 'utf8'));
            if (complexityData.recommendations) {
              complexityData.recommendations.slice(0, 3).forEach(rec => {
                comment += `- 💡 ${rec}\n`;
              });
            }
          } catch (e) {
            comment += '- 💡 Review quality reports for detailed recommendations\n';
          }
          
          comment += '\n---\n';
          comment += `🔗 [View detailed quality dashboard](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`;
          
          // Create or update comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number
          });
          
          const existingComment = comments.find(c => c.body.includes('📊 Code Quality Report'));
          
          if (existingComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: comment
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }
    
    - name: ❌ Fail Build on Quality Gate Violations
      if: steps.quality-gates.outcome == 'failure'
      run: |
        echo "❌ Quality gates failed! Build cannot proceed."
        echo "💡 Check the quality reports above for details on how to fix the issues."
        exit 1

  # Separate job for dependency analysis to not slow down main quality checks
  dependency-analysis:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'schedule'
    
    steps:
    - name: 🔍 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: 🔒 Security Vulnerability Scan
      run: |
        pip install safety bandit
        cd Backend_PRS
        
        # Check for known security vulnerabilities in dependencies
        safety check --json --output safety-report.json || echo "Safety scan completed"
        
        # Static security analysis
        bandit -r . -f json -o bandit-report.json || echo "Bandit scan completed"
    
    - name: 📤 Upload Security Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          Backend_PRS/safety-report.json
          Backend_PRS/bandit-report.json
        retention-days: 90

  # Quality trend tracking (only on main branch)
  quality-tracking:
    name: Quality Trend Tracking
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: quality-gates
    
    steps:
    - name: 🔍 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: 📦 Install Dependencies
      run: |
        pip install --upgrade pip
        cd Backend_PRS
        pip install -r requirements.txt || echo "Warning: requirements installation"
    
    - name: 📈 Track Quality Metrics
      run: |
        cd Backend_PRS
        python scripts/quality/quality_dashboard.py --track-history
    
    - name: 💾 Commit Quality Database
      run: |
        cd Backend_PRS
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        if [ -f "quality_metrics.db" ]; then
          git add quality_metrics.db
          git commit -m "📈 Update quality metrics database [skip ci]" || echo "No changes to commit"
          git push || echo "Failed to push changes"
        fi

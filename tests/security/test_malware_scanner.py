"""
Management command for testing enhanced malware scanner
Task 1.2.3 Implementation - Test enhanced malware scanning capabilities
"""

import os
import tempfile
from django.core.management.base import BaseCommand, CommandError
from django.core.files.uploadedfile import SimpleUploadedFile
from core_config.malware_scanner import (
    EnhancedMalwareScanner, 
    scan_file_for_malware,
    get_malware_scan_stats,
    report_threat_to_community
)


class Command(BaseCommand):
    help = 'Test enhanced malware scanner capabilities'

    def add_arguments(self, parser):
        parser.add_argument(
            'action',
            choices=['test', 'stats', 'behavioral', 'realtime', 'report'],
            help='Action to perform'
        )
        parser.add_argument(
            '--file-path',
            type=str,
            help='Path to file for testing'
        )
        parser.add_argument(
            '--client-ip',
            type=str,
            default='127.0.0.1',
            help='Client IP for behavioral analysis'
        )
        parser.add_argument(
            '--user-id',
            type=str,
            default='test_user',
            help='User ID for behavioral analysis'
        )
        parser.add_argument(
            '--hash',
            type=str,
            help='File hash for threat reporting'
        )
        parser.add_argument(
            '--reason',
            type=str,
            help='Reason for threat report'
        )

    def handle(self, *args, **options):
        action = options['action']
        
        if action == 'test':
            self.test_scanner(options)
        elif action == 'stats':
            self.show_stats()
        elif action == 'behavioral':
            self.test_behavioral_analysis(options)
        elif action == 'realtime':
            self.test_realtime_detection(options)
        elif action == 'report':
            self.report_threat(options)

    def test_scanner(self, options):
        """Test the enhanced malware scanner with various file types"""
        self.stdout.write(self.style.SUCCESS("Testing Enhanced Malware Scanner\n"))
        
        test_cases = [
            {
                'name': 'Clean text file',
                'content': b'This is a clean text file with normal content.',
                'filename': 'clean.txt',
                'expected_clean': True
            },
            {
                'name': 'PHP webshell',
                'content': b'<?php eval($_POST["cmd"]); ?>',
                'filename': 'webshell.php',
                'expected_clean': False
            },
            {
                'name': 'JavaScript with eval',
                'content': b'<script>eval(unescape("%75%6E%65%73%63%61%70%65"));</script>',
                'filename': 'malicious.js',
                'expected_clean': False
            },
            {
                'name': 'SQL injection attempt',
                'content': b"'; DROP TABLE users; --",
                'filename': 'injection.sql',
                'expected_clean': False
            },
            {
                'name': 'Suspicious API calls',
                'content': b'CreateRemoteThread VirtualAllocEx WriteProcessMemory',
                'filename': 'suspicious.bin',
                'expected_clean': False
            },
            {
                'name': 'High entropy data',
                'content': os.urandom(1024),  # Random bytes
                'filename': 'encrypted.dat',
                'expected_clean': True  # High entropy alone shouldn't fail
            }
        ]
        
        scanner = EnhancedMalwareScanner()
        results = []
        
        for test_case in test_cases:
            self.stdout.write(f"Testing: {test_case['name']}")
            
            test_file = SimpleUploadedFile(
                test_case['filename'],
                test_case['content'],
                content_type='application/octet-stream'
            )
            
            try:
                result = scanner.scan_file(
                    test_file,
                    test_case['filename'],
                    client_ip=options['client_ip'],
                    user_id=options['user_id']
                )
                
                is_clean = result['is_clean']
                expected = test_case['expected_clean']
                
                if is_clean == expected:
                    status = self.style.SUCCESS("✓ PASS")
                else:
                    status = self.style.ERROR("✗ FAIL")
                
                self.stdout.write(f"  {status} - Clean: {is_clean}, Expected: {expected}")
                
                if result['threats_detected']:
                    self.stdout.write(f"  Threats: {', '.join(result['threats_detected'][:3])}")
                
                if result.get('behavioral_analysis', {}).get('behavioral_flags'):
                    flags = result['behavioral_analysis']['behavioral_flags']
                    self.stdout.write(f"  Behavioral flags: {', '.join(flags)}")
                
                if result.get('real_time_threats', {}).get('threat_detected'):
                    confidence = result['real_time_threats'].get('threat_confidence', 0)
                    self.stdout.write(f"  Real-time threat confidence: {confidence}%")
                
                results.append({
                    'test': test_case['name'],
                    'passed': is_clean == expected,
                    'result': result
                })
                
            except Exception as e:
                expected_fail = not test_case['expected_clean']
                if expected_fail:
                    status = self.style.SUCCESS("✓ PASS (Expected failure)")
                else:
                    status = self.style.ERROR("✗ FAIL (Unexpected failure)")
                
                self.stdout.write(f"  {status} - Error: {str(e)}")
                results.append({
                    'test': test_case['name'],
                    'passed': expected_fail,
                    'error': str(e)
                })
            
            self.stdout.write("")
        
        # Summary
        passed = sum(1 for r in results if r['passed'])
        total = len(results)
        
        self.stdout.write(self.style.SUCCESS(f"\nTest Summary: {passed}/{total} tests passed"))
        
        if passed == total:
            self.stdout.write(self.style.SUCCESS("All tests passed! ✓"))
        else:
            failed_tests = [r['test'] for r in results if not r['passed']]
            self.stdout.write(self.style.ERROR(f"Failed tests: {', '.join(failed_tests)}"))

    def test_behavioral_analysis(self, options):
        """Test behavioral analysis with multiple uploads"""
        self.stdout.write(self.style.SUCCESS("Testing Behavioral Analysis\n"))
        
        scanner = EnhancedMalwareScanner()
        client_ip = options['client_ip']
        user_id = options['user_id']
        
        # Simulate multiple rapid uploads
        self.stdout.write("Simulating rapid uploads...")
        
        for i in range(25):  # Upload 25 files rapidly
            test_file = SimpleUploadedFile(
                f'test_{i}.txt',
                b'Test content',
                content_type='text/plain'
            )
            
            behavioral_result = scanner.behavioral_analyzer.analyze_upload_behavior(
                test_file, client_ip, user_id
            )
            
            if i == 0:
                self.stdout.write(f"Upload 1 - Risk score: {behavioral_result['risk_score']}")
            elif i == 10:
                self.stdout.write(f"Upload 11 - Risk score: {behavioral_result['risk_score']}")
            elif i == 24:
                self.stdout.write(f"Upload 25 - Risk score: {behavioral_result['risk_score']}")
                self.stdout.write(f"Behavioral flags: {behavioral_result['behavioral_flags']}")
        
        # Test suspicious naming patterns
        self.stdout.write("\nTesting suspicious naming patterns...")
        
        suspicious_names = [
            'a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6.txt',  # MD5-like
            'temp_12345.txt',
            'test.txt',
            '123.txt',
            'a.txt'
        ]
        
        for name in suspicious_names:
            test_file = SimpleUploadedFile(name, b'content', content_type='text/plain')
            behavioral_result = scanner.behavioral_analyzer.analyze_upload_behavior(
                test_file, client_ip, user_id
            )
        
        # Final behavioral analysis
        final_file = SimpleUploadedFile('final.txt', b'content', content_type='text/plain')
        final_result = scanner.behavioral_analyzer.analyze_upload_behavior(
            final_file, client_ip, user_id
        )
        
        self.stdout.write(f"\nFinal behavioral analysis:")
        self.stdout.write(f"Risk score: {final_result['risk_score']}")
        self.stdout.write(f"Upload velocity: {final_result['upload_velocity']:.2f} files/hour")
        self.stdout.write(f"Behavioral flags: {final_result['behavioral_flags']}")

    def test_realtime_detection(self, options):
        """Test real-time threat detection"""
        self.stdout.write(self.style.SUCCESS("Testing Real-time Threat Detection\n"))
        
        scanner = EnhancedMalwareScanner()
        
        # Test with known threat hash
        self.stdout.write("Testing threat intelligence...")
        scanner.threat_detector.report_threat(
            'test_hash_123',
            'trojan',
            85,
            'Test malware for demonstration'
        )
        
        test_file = SimpleUploadedFile('test.exe', b'MZ test content', content_type='application/octet-stream')
        threat_result = scanner.threat_detector.check_real_time_threats(test_file, 'test_hash_123')
        
        self.stdout.write(f"Threat detected: {threat_result['threat_detected']}")
        self.stdout.write(f"Confidence: {threat_result['threat_confidence']}%")
        self.stdout.write(f"Sources: {threat_result['threat_sources']}")
        
        # Test community reports
        self.stdout.write("\nTesting community reports...")
        
        for i in range(5):
            scanner.threat_detector.add_community_report(
                'community_hash_456',
                f'user_{i}',
                'Suspicious behavior detected'
            )
        
        community_result = scanner.threat_detector.check_real_time_threats(test_file, 'community_hash_456')
        
        self.stdout.write(f"Community threat detected: {community_result['threat_detected']}")
        self.stdout.write(f"Confidence: {community_result['threat_confidence']}%")

    def report_threat(self, options):
        """Report a threat to the community"""
        file_hash = options.get('hash')
        user_id = options.get('user_id', 'admin')
        reason = options.get('reason', 'Manual threat report')
        
        if not file_hash:
            raise CommandError("--hash is required for threat reporting")
        
        report_threat_to_community(file_hash, user_id, reason)
        self.stdout.write(
            self.style.SUCCESS(f"Threat reported: {file_hash} by {user_id}")
        )

    def show_stats(self):
        """Show malware scanner statistics"""
        self.stdout.write(self.style.SUCCESS("Malware Scanner Statistics\n"))
        
        stats = get_malware_scan_stats()
        
        self.stdout.write(f"Total scans: {stats['total_scans']}")
        self.stdout.write(f"Clean files: {stats['clean_files']}")
        self.stdout.write(f"Infected files: {stats['infected_files']}")
        self.stdout.write(f"Files with warnings: {stats['files_with_warnings']}")
        self.stdout.write(f"Behavioral flags: {stats['behavioral_flags']}")
        self.stdout.write(f"Real-time threats: {stats['real_time_threats']}")
        self.stdout.write(f"High-risk files: {stats['high_risk_files']}")
        
        if stats['total_scans'] > 0:
            clean_rate = (stats['clean_files'] / stats['total_scans']) * 100
            self.stdout.write(f"\nClean rate: {clean_rate:.1f}%")
            
            if stats['infected_files'] > 0:
                detection_rate = (stats['infected_files'] / (stats['infected_files'] + stats['clean_files'])) * 100
                self.stdout.write(f"Detection rate: {detection_rate:.1f}%")
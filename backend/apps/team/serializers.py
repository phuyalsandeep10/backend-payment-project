from rest_framework import serializers
from .models import Team
from apps.authentication.serializers import UserLiteSerializer
from apps.project.models import Project
from apps.authentication.models import User


# Provide nested basic details for lead & members, but also allow ID-based writes
class TeamSerializer(serializers.ModelSerializer):
    # Nested read-only representations
    team_lead = UserLiteSerializer(read_only=True)
    members = UserLiteSerializer(read_only=True, many=True)

    # Write-only ID fields â€“ frontend sends these
    team_lead_id = serializers.PrimaryKeyRelatedField(
        write_only=True,
        queryset=User.objects.all(),
        source='team_lead',
        required=False,
        allow_null=True,
    )

    member_ids = serializers.PrimaryKeyRelatedField(
        write_only=True,
        queryset=User.objects.all(),
        many=True,
        source='members',
        required=False,
    )

    # Alternative field name to avoid security validation issues
    memberlist = serializers.PrimaryKeyRelatedField(
        write_only=True,
        queryset=User.objects.all(),
        many=True,
        source='members',
        required=False,
    )

    # We keep 'projects' as the default writable field generated by ModelSerializer, so no extra write helper needed.

    class Meta:
        model = Team
        fields = [
            'id', 'name', 'organization',
            # Readable
            'team_lead', 'members', 'projects',
            # Writable helpers
            'team_lead_id', 'member_ids', 'memberlist',
            'contact_number', 'created_at', 'updated_at'
        ]
        # 'projects' remains writable by default

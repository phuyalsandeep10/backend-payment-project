"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import environ
import os

env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False)
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Take environment variables from .env file
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

# CRITICAL SECURITY FIX: ALLOWED_HOSTS
ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '0.0.0.0',
    # Ngrok domains (enhanced for reliability)
    '*.ngrok.io',
    '*.ngrok-free.app',
    '*.ngrok.app',
    'f9a6-2400-1a00-3b4c-94f4-c95-5068-7c57-c62c.ngrok-free.app',
    # Allow all for development (use with caution in production)
    '*',
]

# Disable APPEND_SLASH to fix Render deployment issue
APPEND_SLASH = False

# Security Headers (adjusted for ngrok compatibility)
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'SAMEORIGIN'  # Less restrictive than DENY for ngrok development
SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'

# Session Security
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Strict'
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_AGE = 3600  # 1 hour

# CSRF Protection (relaxed for development/ngrok)
CSRF_COOKIE_HTTPONLY = True
CSRF_COOKIE_SAMESITE = 'Lax'  # Changed from 'Strict' to 'Lax' for ngrok compatibility
CSRF_TRUSTED_ORIGINS = [
    'http://localhost:3000',
    'http://localhost:3001', 
    'http://localhost:4200',
    'http://localhost:8080',
    'http://127.0.0.1:3000',
    'http://127.0.0.1:3001',
    'http://127.0.0.1:4200', 
    'http://127.0.0.1:8080',
    'http://localhost:8000',
    'http://127.0.0.1:8000',
    'http://*',
]

# File Upload Security
FILE_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5MB
FILE_UPLOAD_PERMISSIONS = 0o644


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    # third party apps
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'drf_yasg',

    # my apps
    "authentication",
    "clients",
    "organization",
    "permissions",
    "commission",
    "team",
    "project",
    "deals",
    "notifications",
    'Sales_dashboard',
    'django_filters',
    'django_extensions',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',  # Keep for admin but not default
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend'
    ],
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/hour',
        'user': '1000/hour',
        'login': '5/min',
        'otp': '3/min'
    },
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
    'UNAUTHENTICATED_USER': 'django.contrib.auth.models.AnonymousUser',
    'UNAUTHENTICATED_TOKEN': None,
}


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    # Custom ngrok compatibility middleware (must be early in the chain)
    "core_config.ngrok_middleware.NgrokCompatibilityMiddleware",
    # Token authentication middleware (must be before AuthenticationMiddleware)
    "core_config.token_middleware.TokenAuthMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # Custom security middleware
    "core_config.middleware.SecurityHeadersMiddleware",
    # Temporarily disabled for testing
    # "core_config.middleware.SecurityMonitoringMiddleware",
    # "core_config.middleware.RequestLoggingMiddleware",
]

ROOT_URLCONF = "core_config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core_config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Use environment variables for database connection, with a fallback to SQLite
DB_NAME = env('DB_NAME', default=None)

if DB_NAME:
    DATABASES = {
        'default': {
            'ENGINE': env('DB_ENGINE', default='django.db.backends.postgresql'),
            'NAME': DB_NAME,
            'USER': env('DB_USER'),
            'PASSWORD': env('DB_PASSWORD'),
            'HOST': env('DB_HOST'),
            'PORT': env('DB_PORT', default='5432'),
        }
    }
else:
    # Fallback to SQLite if no database environment variables are set
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Enhanced Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {
            "min_length": 12,  # Increased from default 8
        }
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

# For production, use WhiteNoise to serve static files
# http://whitenoise.evans.io/en/stable/django.html
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Custom User Model
AUTH_USER_MODEL = 'authentication.User'

# CORS Configuration for Frontend Integration and Ngrok Compatibility
CORS_ALLOW_ALL_ORIGINS = env.bool('CORS_ALLOW_ALL_ORIGINS', default=True)  # Enable for development

# Comprehensive origin allowlist for local development and ngrok
CORS_ALLOWED_ORIGINS = env.list('CORS_ALLOWED_ORIGINS', default=[
    "http://localhost:3000",    # React development server
    "http://localhost:3001",    # Alternative frontend port  
    "http://localhost:4200",    # Angular development server
    "http://localhost:8080",    # Vue.js development server
    "http://127.0.0.1:3000",
    "http://127.0.0.1:3001", 
    "http://127.0.0.1:4200",
    "http://127.0.0.1:8080",
    "http://*",
])

# Ngrok-specific regex patterns for dynamic subdomains
CORS_ALLOWED_ORIGIN_REGEXES = [
    r"^https://.*\.ngrok\.io$",
    r"^https://.*\.ngrok-free\.app$", 
    r"^https://.*\.ngrok\.app$",
    r"^http://.*\.ngrok\.io$",
    r"^http://.*\.ngrok-free\.app$",
    r"^http://.*\.ngrok\.app$",
]

# Allow credentials for token-based authentication (required for auth headers)
CORS_ALLOW_CREDENTIALS = True

# Extended preflight cache for better performance
CORS_PREFLIGHT_MAX_AGE = 86400  # 24 hours

# Allow all origins for development (this overrides the specific origins above)
# Set to False in production and use specific origins
CORS_ALLOW_ALL_ORIGINS = True

# Allow comprehensive headers for API requests and ngrok compatibility
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'cache-control',
    'x-forwarded-for',
    'x-forwarded-proto',
    'x-real-ip',
    'ngrok-trace-id',  # Ngrok specific header
]

# Allow common HTTP methods
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

SWAGGER_SETTINGS = {
   'SECURITY_DEFINITIONS': {
      'Token': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header',
            'description': "Enter your token here (e.g., '5df12943f200cc5d1962c461bf480ff763728d95'). The 'Token ' prefix will be added automatically."
        }
    },
    'USE_SESSION_AUTH': False,  # Disable session auth to prevent Django login redirect
    'LOGIN_URL': None,  # Remove login URL to prevent redirect
    'LOGOUT_URL': None,  # Remove logout URL
    'PERSIST_AUTH': True,  # Keep token auth persistent
    'REFETCH_SCHEMA_WITH_AUTH': True,  # Refetch schema when authenticated
    'REFETCH_SCHEMA_ON_LOGOUT': True,  # Refetch schema when logged out
    'DEFAULT_INFO': 'core_config.urls.api_info',  # Custom API info
    'DEFAULT_FIELD_INSPECTORS': [
        'drf_yasg.inspectors.CamelCaseJSONFilter',
        'drf_yasg.inspectors.InlineSerializerInspector',
        'drf_yasg.inspectors.RelatedFieldInspector',
        'drf_yasg.inspectors.ChoiceFieldInspector',
        'drf_yasg.inspectors.FileFieldInspector',
        'drf_yasg.inspectors.DictFieldInspector',
        'drf_yasg.inspectors.SimpleFieldInspector',
        'drf_yasg.inspectors.StringDefaultFieldInspector',
    ],
    'DEFAULT_AUTO_SCHEMA_CLASS': 'drf_yasg.inspectors.SwaggerAutoSchema',
}

# Email Configuration - Temporarily disabled SMTP, using console backend
# Uses console backend to avoid SMTP errors during development
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# SMTP Configuration (used by RobustEmailBackend)
EMAIL_HOST = env('EMAIL_HOST', default='smtp.gmail.com')
EMAIL_PORT = env.int('EMAIL_PORT', default=587)
EMAIL_USE_TLS = env.bool('EMAIL_USE_TLS', default=True)
EMAIL_USE_SSL = env.bool('EMAIL_USE_SSL', default=False)
EMAIL_HOST_USER = env('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD', default='')

# Fix DEFAULT_FROM_EMAIL to avoid circular reference issues
if env('EMAIL_HOST_USER', default=''):
    DEFAULT_FROM_EMAIL = env('DEFAULT_FROM_EMAIL', default=f"PRS System <{env('EMAIL_HOST_USER')}>")
else:
    DEFAULT_FROM_EMAIL = env('DEFAULT_FROM_EMAIL', default='PRS System <noreply@prs.com>')

# Email Backend Features
EMAIL_TIMEOUT = 30
EMAIL_USE_LOCALTIME = False

# Super Admin OTP Email - this should be set in .env file
SUPER_ADMIN_OTP_EMAIL = env('SUPER_ADMIN_OTP_EMAIL', default=env('EMAIL_HOST_USER', default='admin@example.com'))

# Custom settings for management commands
ADMIN_USER = env('ADMIN_USER', default='admin')
ADMIN_EMAIL = env('ADMIN_EMAIL', default='admin@example.com')
ADMIN_PASS = env('ADMIN_PASS', default='password')

# Caching for better performance - using locmem for development
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'prs-cache',
        'TIMEOUT': 300,
    }
}

# Security Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'security_file': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'security.log',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        'security': {
            'handlers': ['security_file', 'console'],
            'level': 'WARNING',
            'propagate': True,
        },
        'django.security': {
            'handlers': ['security_file'],
            'level': 'WARNING',
            'propagate': False,
        },
        'prs.email': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# If in development and not on a platform like Render, add ngrok tunnel to allowed hosts
if 'RENDER' not in os.environ:
    if DEBUG:
        try:
            from pyngrok import ngrok
            
            # Get the ngrok tunnel
            tunnels = ngrok.get_tunnels()
            if tunnels:
                # Get the public URL of the first tunnel
                public_url = tunnels[0].public_url
                
                # Extract the hostname
                hostname = public_url.split('//')[1]
                
                # Add to allowed hosts
                ALLOWED_HOSTS.append(hostname)
                
                print(f"[INFO] Added ngrok host {hostname} to ALLOWED_HOSTS")
                
        except Exception as e:
            print(f"[WARNING] Could not get ngrok tunnel: {e}")
            print("[WARNING] If you are using ngrok, you may need to add your tunnel hostname to ALLOWED_HOSTS manually.")


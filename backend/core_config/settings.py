"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import environ
import os

env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False)
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Take environment variables from .env file
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', default=False)

# Define allowed hosts based on environment
if DEBUG:
    ALLOWED_HOSTS = [
        'localhost', 
        '127.0.0.1', 
        '0.0.0.0', 
        '*',
        # VS Code Dev Tunnels support
        '.inc1.devtunnels.ms',
        '.devtunnels.ms',
        '.tunnel.dev',
        '.ngrok.io',
        '.ngrok-free.app',
    ]
else:
    ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['.your-production-domain.com'])

# Disable APPEND_SLASH to fix Render deployment issue
APPEND_SLASH = False

# Security Headers (adjusted for ngrok compatibility)
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'SAMEORIGIN'  # Less restrictive than DENY for ngrok development
SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'

# Session Security
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Strict'
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_AGE = 3600  # 1 hour

# CSRF Protection
CSRF_COOKIE_HTTPONLY = True
CSRF_COOKIE_SAMESITE = 'Lax' if DEBUG else 'Strict'
CSRF_TRUSTED_ORIGINS = env.list('CSRF_TRUSTED_ORIGINS', default=[
    'http://localhost:3000',
    'http://localhost:3001',
    'http://localhost:4200',
    'http://localhost:8080',
    'http://127.0.0.1:3000',
    'http://127.0.0.1:3001',
    'http://127.0.0.1:4200',
    'http://127.0.0.1:8080',
    # VS Code Dev Tunnels support
    'https://*.inc1.devtunnels.ms',
    'https://*.devtunnels.ms',
    'https://*.tunnel.dev',
    'https://*.ngrok.io',
    'https://*.ngrok-free.app',
])

# File Upload Security
FILE_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5MB
FILE_UPLOAD_PERMISSIONS = 0o644


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    # third party apps
    'rest_framework',
    'rest_framework.authtoken',
    'channels',
    'corsheaders',
    'drf_yasg',
    'cloudinary',
    'cloudinary_storage',

    # my apps
    "authentication",
    "clients",
    "organization",
    "permissions",
    "commission",
    "team",
    "project",
    "deals",
    "notifications",
    'Sales_dashboard',
    'Verifier_dashboard',
    'django_filters',
    'django_extensions',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',  # Keep for admin but not default
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 25,
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend'
    ],
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/hour',
        'user': '1000/hour',
        'login': '5/min',
        'otp': '3/min'
    },
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
    'UNAUTHENTICATED_USER': 'django.contrib.auth.models.AnonymousUser',
    'UNAUTHENTICATED_TOKEN': None,
}


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    # Custom CORS preflight middleware for shared development (must be early)
    "core_config.middleware.CORSPreflightMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    # Token authentication middleware (after CORS but before auth)
    "core_config.token_middleware.TokenAuthMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # Custom security middleware
    "core_config.middleware.SecurityHeadersMiddleware",
    "core_config.middleware.SecurityMonitoringMiddleware",
    "core_config.middleware.RequestLoggingMiddleware",
]

ROOT_URLCONF = "core_config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core_config.wsgi.application"
ASGI_APPLICATION = 'core_config.asgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Use DATABASE_URL (recommended across services like Render, Heroku, Railway)
# Format: postgresql://user:password@host:port/database
# Example: postgresql://myuser:mypassword@localhost:5432/mydatabase
import dj_database_url

# Get DATABASE_URL from environment, with fallback to individual variables
DATABASE_URL = env('DATABASE_URL', default=None)

if DATABASE_URL:
    # Use the full DATABASE_URL (recommended approach)
    DATABASES = {
        'default': dj_database_url.parse(DATABASE_URL)
    }
else:
    # Fallback to individual environment variables (legacy support)
    DB_NAME = env('DB_NAME', default=None)
    
    if DB_NAME:
        DATABASES = {
            'default': {
                'ENGINE': env('DB_ENGINE', default='django.db.backends.postgresql'),
                'NAME': DB_NAME,
                'USER': env('DB_USER'),
                'PASSWORD': env('DB_PASSWORD'),
                'HOST': env('DB_HOST'),
                'PORT': env('DB_PORT', default='5432'),
            }
        }
    else:
        # Final fallback to SQLite for development
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }


# Enhanced Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {
            "min_length": 12,  # Increased from default 8
        }
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Media files (user-uploaded content)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# For production, use WhiteNoise to serve static files
# http://whitenoise.evans.io/en/stable/django.html
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Cloudinary Storage Configuration
CLOUDINARY_STORAGE = {
    'CLOUD_NAME': env('CLOUDINARY_CLOUD_NAME', default=None),
    'API_KEY': env('CLOUDINARY_API_KEY', default=None),
    'API_SECRET': env('CLOUDINARY_API_SECRET', default=None),
}
DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Channels
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('127.0.0.1', 6379)],
        },
    },
}

# Custom User Model
AUTH_USER_MODEL = 'authentication.User'

# CORS Configuration
if DEBUG:
    CORS_ALLOW_ALL_ORIGINS = True
    CORS_ALLOW_CREDENTIALS = True
    CORS_EXPOSE_HEADERS = ['*']
    CORS_ALLOW_PRIVATE_NETWORK = True
    # Additional CORS settings for shared development
    CORS_ORIGIN_ALLOW_ALL = True
    CORS_ALLOW_HEADERS = [
        'accept',
        'accept-encoding',
        'authorization',
        'content-type',
        'dnt',
        'origin',
        'user-agent',
        'x-csrftoken',
        'x-requested-with',
        'cache-control',
        'pragma',
        'x-api-key',
        'x-request-id',
        'x-forwarded-for',
        'x-forwarded-proto',
        'x-real-ip',
        'x-device-id',
        'x-session-id',
        'x-client-version',
        'x-platform',
        'x-app-version',
    ]
    CORS_ALLOW_METHODS = [
        'DELETE',
        'GET',
        'OPTIONS',
        'PATCH',
        'POST',
        'PUT',
    ]
else:
    CORS_ALLOW_ALL_ORIGINS = False
    CORS_ALLOW_CREDENTIALS = True
    CORS_ALLOWED_ORIGINS = env.list('CORS_ALLOWED_ORIGINS', default=[])



SWAGGER_SETTINGS = {
   'SECURITY_DEFINITIONS': {
      'Token': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header',
            'description': "Enter your token here (e.g., '5df12943f200cc5d1962c461bf480ff763728d95'). The 'Token ' prefix will be added automatically."
        }
    },
    'USE_SESSION_AUTH': False,  # Disable session auth to prevent Django login redirect
    'LOGIN_URL': None,  # Remove login URL to prevent redirect
    'LOGOUT_URL': None,  # Remove logout URL
    'PERSIST_AUTH': True,  # Keep token auth persistent
    'REFETCH_SCHEMA_WITH_AUTH': True,  # Refetch schema when authenticated
    'REFETCH_SCHEMA_ON_LOGOUT': True,  # Refetch schema when logged out
    'DEFAULT_INFO': 'core_config.urls.api_info',  # Custom API info
    'DEFAULT_FIELD_INSPECTORS': [
        'drf_yasg.inspectors.CamelCaseJSONFilter',
        'drf_yasg.inspectors.InlineSerializerInspector',
        'drf_yasg.inspectors.RelatedFieldInspector',
        'drf_yasg.inspectors.ChoiceFieldInspector',
        'drf_yasg.inspectors.FileFieldInspector',
        'drf_yasg.inspectors.DictFieldInspector',
        'drf_yasg.inspectors.SimpleFieldInspector',
        'drf_yasg.inspectors.StringDefaultFieldInspector',
    ],
    'DEFAULT_AUTO_SCHEMA_CLASS': 'drf_yasg.inspectors.SwaggerAutoSchema',
}

# Custom settings for management commands
ADMIN_USER = env('ADMIN_USER', default='admin')
ADMIN_PASS = env('ADMIN_PASS', default='Admin123')

# Caching for better performance - using locmem for development
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'prs-cache',
        'TIMEOUT': 300,
    }
}

# Security Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'security_file': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'security.log',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        'security': {
            'handlers': ['security_file', 'console'],
            'level': 'WARNING',
            'propagate': True,
        },
        'django.security': {
            'handlers': ['security_file'],
            'level': 'WARNING',
            'propagate': False,
        },
    },
}

# If in development and not on a platform like Render, add ngrok tunnel to allowed hosts
# if 'RENDER' not in os.environ:
#     if DEBUG:
#         try:
#             from pyngrok import ngrok
            
#             # Get the ngrok tunnel
#             tunnels = ngrok.get_tunnels()
#             if tunnels:
#                 # Get the public URL of the first tunnel
#                 public_url = tunnels[0].public_url
                
#                 # Extract the hostname
#                 hostname = public_url.split('//')[1]
                
#                 # Add to allowed hosts
#                 ALLOWED_HOSTS.append(hostname)
                
#                 print(f"[INFO] Added ngrok host {hostname} to ALLOWED_HOSTS")
                
#         except Exception as e:
#             print(f"[WARNING] Could not get ngrok tunnel: {e}")
#             print("[WARNING] If you are using ngrok, you may need to add your tunnel hostname to ALLOWED_HOSTS manually.")

# -----------------------------------------------------------------------------
# Email Configuration
# -----------------------------------------------------------------------------
# In development we don’t want to send real emails; instead print them to the
# terminal so developers can see temporary passwords / activation links.
# In production we fall back to the SMTP settings that can be provided via env.
if DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
else:
    EMAIL_BACKEND = env('EMAIL_BACKEND', default='django.core.mail.backends.smtp.EmailBackend')
    EMAIL_HOST = env('EMAIL_HOST', default='smtp.your-provider.com')
    EMAIL_PORT = env.int('EMAIL_PORT', default=587)
    EMAIL_HOST_USER = env('EMAIL_HOST_USER', default='')
    EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD', default='')
    EMAIL_USE_TLS = env.bool('EMAIL_USE_TLS', default=True)
    EMAIL_USE_SSL = env.bool('EMAIL_USE_SSL', default=False)

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("127.0.0.1", 6379)],
        },
    },
}


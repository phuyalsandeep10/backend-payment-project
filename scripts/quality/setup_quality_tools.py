#!/usr/bin/env python3
"""
Quality Tools Setup Script

This script sets up the code quality analysis tools for the PRS backend project.
It creates necessary directories, initializes the database, and provides guidance
on integrating quality gates into the development workflow.

Usage:
    python setup_quality_tools.py
    python setup_quality_tools.py --install-hooks
    python setup_quality_tools.py --full-setup
"""

import os
import sys
import subprocess
from pathlib import Path
import argparse


class QualityToolsSetup:
    """Sets up quality analysis tools and integrations"""
    
    def __init__(self, project_root: str = None):
        if project_root:
            self.project_root = Path(project_root).resolve()
        else:
            # Auto-detect project root (go up from scripts/quality/)
            self.project_root = Path(__file__).parent.parent.parent
        
        self.quality_dir = self.project_root / "scripts" / "quality"
        self.reports_dir = self.quality_dir / "reports"
        
    def setup_directories(self):
        """Create necessary directories"""
        print("üìÅ Creating directory structure...")
        
        directories = [
            self.reports_dir,
            self.project_root / ".github" / "workflows",
            self.project_root / ".git" / "hooks"
        ]
        
        for directory in directories:
            directory.mkdir(parents=True, exist_ok=True)
            print(f"   ‚úÖ {directory.relative_to(self.project_root)}")
        
        print("‚úÖ Directory structure created")
    
    def initialize_database(self):
        """Initialize the quality metrics database"""
        print("üóÑÔ∏è Initializing quality metrics database...")
        
        try:
            # Import and initialize the database
            sys.path.insert(0, str(self.quality_dir))
            from quality_dashboard import QualityDatabase
            
            db = QualityDatabase(str(self.project_root / "quality_metrics.db"))
            print("‚úÖ Quality metrics database initialized")
            
        except ImportError as e:
            print(f"‚ö†Ô∏è  Could not initialize database: {e}")
            print("   Database will be created on first use")
    
    def install_pre_commit_hook(self):
        """Install pre-commit quality gate hook"""
        print("ü™ù Installing pre-commit hook...")
        
        hook_path = self.project_root / ".git" / "hooks" / "pre-commit"
        
        hook_content = f'''#!/bin/bash
# Pre-commit quality gate hook
# Auto-generated by PRS quality tools setup

echo "üîç Running code quality checks..."

# Change to project root
cd "{self.project_root}"

# Run quality gates (fast check for pre-commit)
python scripts/quality/quality_gates.py --check --module core_config --module apps/authentication

if [ $? -ne 0 ]; then
    echo "‚ùå Quality gates failed! Commit blocked."
    echo ""
    echo "üí° Quick fixes:"
    echo "   1. Run: python scripts/quality/quality_gates.py --check --verbose"
    echo "   2. Break down large files (>300 lines)"
    echo "   3. Simplify complex functions"
    echo ""
    echo "üöÄ Or run full analysis: make -C scripts/quality check"
    exit 1
fi

echo "‚úÖ Quality gates passed!"
'''
        
        try:
            hook_path.write_text(hook_content)
            hook_path.chmod(0o755)  # Make executable
            print(f"‚úÖ Pre-commit hook installed: {hook_path.relative_to(self.project_root)}")
        except Exception as e:
            print(f"‚ö†Ô∏è  Could not install pre-commit hook: {e}")
    
    def install_dependencies(self):
        """Install optional quality tool dependencies"""
        print("üì¶ Installing quality tool dependencies...")
        
        requirements_file = self.quality_dir / "requirements.txt"
        
        if not requirements_file.exists():
            print("‚ö†Ô∏è  Requirements file not found, skipping dependency installation")
            return
        
        try:
            subprocess.run([
                sys.executable, "-m", "pip", "install", "-r", str(requirements_file)
            ], check=True, capture_output=True, text=True)
            print("‚úÖ Dependencies installed successfully")
            
        except subprocess.CalledProcessError as e:
            print(f"‚ö†Ô∏è  Could not install some dependencies: {e}")
            print("   Quality tools will work with basic functionality")
        except FileNotFoundError:
            print("‚ö†Ô∏è  pip not found, please install dependencies manually:")
            print(f"   pip install -r {requirements_file}")
    
    def create_makefile_symlink(self):
        """Create a convenience symlink to the Makefile"""
        print("üîó Creating Makefile symlink...")
        
        try:
            makefile_source = self.quality_dir / "Makefile"
            makefile_link = self.project_root / "Makefile.quality"
            
            if makefile_link.exists():
                makefile_link.unlink()  # Remove existing symlink
            
            # Create relative symlink
            relative_path = os.path.relpath(makefile_source, self.project_root)
            os.symlink(relative_path, makefile_link)
            
            print(f"‚úÖ Makefile symlink created: {makefile_link.relative_to(self.project_root)}")
            print(f"   Usage: make -f Makefile.quality help")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Could not create Makefile symlink: {e}")
            print(f"   Use: make -C scripts/quality help")
    
    def run_initial_analysis(self):
        """Run initial quality analysis"""
        print("üîç Running initial quality analysis...")
        
        try:
            os.chdir(self.project_root)
            
            # Run complexity analysis
            result = subprocess.run([
                sys.executable, "scripts/quality/code_complexity_analyzer.py",
                "--project-root", ".",
                "--output", "scripts/quality/reports/initial-analysis.json"
            ], capture_output=True, text=True, timeout=60)
            
            if result.returncode == 0:
                print("‚úÖ Initial analysis completed")
                print("üìä Check scripts/quality/reports/initial-analysis.json for results")
            else:
                print("‚ö†Ô∏è  Initial analysis had some issues:")
                print(result.stderr[:500])  # First 500 chars of error
                
        except subprocess.TimeoutExpired:
            print("‚ö†Ô∏è  Analysis timed out, but tools are ready to use")
        except Exception as e:
            print(f"‚ö†Ô∏è  Could not run initial analysis: {e}")
    
    def show_usage_guide(self):
        """Show usage guide and next steps"""
        print("\n" + "="*60)
        print("üéâ QUALITY TOOLS SETUP COMPLETE!")
        print("="*60)
        print()
        print("üìã QUICK START GUIDE:")
        print("   1. Run quality check:      make -C scripts/quality check")
        print("   2. Generate dashboard:     make -C scripts/quality dashboard")
        print("   3. Check specific module:  make -C scripts/quality check-authentication")
        print()
        print("üöÄ CI/CD INTEGRATION:")
        print("   ‚Ä¢ GitHub Actions:  .github/workflows/quality-gates.yml (created)")
        print("   ‚Ä¢ Pre-commit hook: .git/hooks/pre-commit (installed)")
        print()
        print("üìä AVAILABLE TOOLS:")
        print("   ‚Ä¢ Code Complexity Analyzer:  python scripts/quality/code_complexity_analyzer.py")
        print("   ‚Ä¢ Quality Gates Enforcer:   python scripts/quality/quality_gates.py")
        print("   ‚Ä¢ Quality Dashboard:         python scripts/quality/quality_dashboard.py")
        print("   ‚Ä¢ Makefile Commands:         make -C scripts/quality help")
        print()
        print("üéØ QUALITY STANDARDS:")
        print("   ‚Ä¢ Core config files:     < 100 lines")
        print("   ‚Ä¢ Authentication files:  < 80 lines")
        print("   ‚Ä¢ General files:         < 200 lines")
        print("   ‚Ä¢ Critical limit:        < 300 lines")
        print()
        print("üí° NEXT STEPS:")
        print("   1. Review current quality status: make -C scripts/quality status")
        print("   2. Generate quality dashboard:    make -C scripts/quality dashboard")
        print("   3. Set up IDE integration (optional)")
        print("   4. Configure team quality standards")
        print()
        print("üìñ For more help: make -C scripts/quality help")
    
    def setup_all(self, install_hooks=False, install_deps=False, run_analysis=True):
        """Run complete setup"""
        print("üîß Setting up PRS Quality Analysis Tools...")
        print(f"üìÅ Project root: {self.project_root}")
        print()
        
        # Core setup
        self.setup_directories()
        self.initialize_database()
        
        # Optional components
        if install_hooks:
            self.install_pre_commit_hook()
        
        if install_deps:
            self.install_dependencies()
        
        self.create_makefile_symlink()
        
        if run_analysis:
            self.run_initial_analysis()
        
        self.show_usage_guide()


def main():
    """Main setup entry point"""
    parser = argparse.ArgumentParser(
        description="Setup PRS Quality Analysis Tools",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  python setup_quality_tools.py                    # Basic setup
  python setup_quality_tools.py --install-hooks   # Setup with pre-commit hooks
  python setup_quality_tools.py --full-setup      # Complete setup with all options
  python setup_quality_tools.py --project-root /path/to/project  # Custom project root
        """
    )
    
    parser.add_argument("--project-root", help="Project root directory (auto-detected if not provided)")
    parser.add_argument("--install-hooks", action="store_true", help="Install pre-commit hooks")
    parser.add_argument("--install-deps", action="store_true", help="Install optional dependencies")
    parser.add_argument("--full-setup", action="store_true", help="Complete setup (hooks + deps + analysis)")
    parser.add_argument("--skip-analysis", action="store_true", help="Skip initial analysis")
    
    args = parser.parse_args()
    
    # Configure setup options
    if args.full_setup:
        install_hooks = True
        install_deps = True
    else:
        install_hooks = args.install_hooks
        install_deps = args.install_deps
    
    run_analysis = not args.skip_analysis
    
    # Run setup
    setup = QualityToolsSetup(args.project_root)
    setup.setup_all(
        install_hooks=install_hooks,
        install_deps=install_deps,
        run_analysis=run_analysis
    )


if __name__ == "__main__":
    main()
